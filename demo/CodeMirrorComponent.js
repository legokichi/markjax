// Generated by CoffeeScript 1.7.1

/*
Mithril CodeMirror component

m.component(CodeMirrorComponent, attrs)

attrs:
  onchange: ()->           # when attrs.value changed
  value: m.prop ""         # textarea value
  option: m.prop           # CodeMirrorComponent option
    enableCodeMirror: true # when it is false, change to textarea from codemirro
  config: m.prop {}        # CodeMirror config
 */
var CodeMirrorComponent;

CodeMirrorComponent = {
  view: function(ctrl, attrs) {
    return m("textarea", {
      wrap: "off",
      style: "width:100%;height:100%;margin:none;box-sizing:border-box;",
      config: CodeMirrorComponent.config(attrs),
      onkeydown: function() {
        m.withAttr("value", attrs.value).apply(this, arguments);
        return attrs.onchange.apply(attrs, arguments);
      }
    }, attrs.value());
  },
  prevConfig: {},
  prevOption: {},
  config: function(attrs) {
    return (function(_this) {
      return function(elm, isInitialized, ctx, vdom) {
        var cm, config, keys, option;
        if (!isInitialized) {
          cm = _this.initCM(attrs, elm);
        }
        if (cm != null) {
          config = attrs.config();
          keys = _this.collectChangeProp(_this.prevConfig, config);
          keys.forEach(function(key) {
            console.log(key, config[key]);
            return cm.setOption(key, config[key]);
          });
          _this.prevConfig = config;
        }
        option = attrs.option();
        keys = _this.collectChangeProp(_this.prevOption, option);
        keys.forEach(function(key) {
          var val;
          val = option[key];
          switch (key) {
            case "enableCodeMirror":
              if (val) {
                if (cm == null) {
                  return cm = _this.initCM(attrs, elm);
                }
              } else {
                if (cm != null) {
                  cm.toTextArea();
                }
                return elm.focus();
              }
          }
        });
        return _this.prevOption = option;
      };
    })(this);
  },
  initCM: function(attrs, elm) {
    var cm;
    cm = CodeMirror.fromTextArea(elm);
    cm.setSize("100%", "100%");
    cm.on("change", function(cm, cmev) {
      m.startComputation();
      attrs.value(cm.doc.getValue());
      if (typeof attrs.onchange === "function") {
        attrs.onchange();
      }
      return m.endComputation();
    });
    return cm;
  },
  collectChangeProp: function(prev, curr) {
    var add, rm;
    rm = Object.keys(prev).filter(function(key) {
      return prev[key] !== curr[key];
    });
    add = Object.keys(curr).filter(function(key) {
      return curr[key] !== prev[key];
    });
    return [].concat(add, rm);
  }
};

// Generated by CoffeeScript 1.7.1
var CodeMirrorComponent, PreviewComponent, RootComponent;

$(function() {
  return m.mount(document.body, RootComponent);
});

RootComponent = {
  controller: function(data) {
    var CodeMirrorController, PreviewController;
    CodeMirrorController = {
      onchange: function(cm, cmev) {
        PreviewController.head("<link rel='stylesheet' href='../thirdparty/github-markdown/github-markdown.css' />");
        return PreviewController.body("<div class='markdown-body'>" + (marked(this.value())) + "</div>");
      },
      changeConfig: function(key, val) {
        var config;
        config = this.config();
        config[key] = val;
        return this.config(config);
      },
      value: m.prop(""),
      config: m.prop({
        enableCodeMirror: true,
        CodeMirrorConfig: {
          mode: "markdown",
          tabMode: "indent",
          tabSize: 2,
          theme: 'solarized dark',
          autoCloseTags: true,
          lineNumbers: true,
          matchBrackets: true,
          autoCloseBrackets: true,
          showCursorWhenSelecting: true,
          extraKeys: {
            "Tab": function(cm) {
              return CodeMirror.commands[(cm.getSelection().length ? "indentMore" : "insertSoftTab")](cm);
            },
            "Shift-Tab": "indentLess"
          }
        }
      })
    };
    PreviewController = {
      head: m.prop(""),
      body: m.prop("")
    };
    return {
      CodeMirrorController: CodeMirrorController,
      PreviewController: PreviewController
    };
  },
  view: function(ctrl) {
    return m("div", {
      id: "box"
    }, [
      m("section", {
        id: "box-editor"
      }, [m.component(CodeMirrorComponent, ctrl.CodeMirrorController)]), m("section", {
        id: "box-box-preview"
      }, [m.component(PreviewComponent, ctrl.PreviewController)])
    ]);
  }
};

PreviewComponent = {
  controller: function(attrs) {
    return {};
  },
  view: function(ctrl, attrs) {
    return m("iframe", {
      id: "box-preview-iframe",
      config: PreviewComponent.config(attrs)
    }, []);
  },
  head: null,
  body: null,
  config: function(attrs) {
    return (function(_this) {
      return function(elm, isInitialized, ctx, vdom) {
        if (!isInitialized) {
          m.mount(elm.contentDocument.head, {
            view: function(_ctrl, _attrs) {
              var code;
              console.log(code = templateConverter.Template(attrs.head()));
              return new Function("ctrl", "attrs", "return " + code)(_ctrl, _attrs);
            }
          });
          return m.mount(elm.contentDocument.body, {
            view: function(_ctrl, _attrs) {
              var code;
              console.log(code = templateConverter.Template(attrs.body()));
              return new Function("ctrl", "attrs", "return " + code)(_ctrl, _attrs);
            }
          });
        }
      };
    })(this);
  }
};

CodeMirrorComponent = {
  controller: function(attrs) {
    return {};
  },
  view: function(ctrl, attrs) {
    return m("textarea", {
      id: "box-editor-textarea",
      wrap: "off",
      config: CodeMirrorComponent.config(attrs),
      onkeydown: function() {
        m.withAttr("value", attrs.value).apply(this, arguments);
        return attrs.onchange.apply(attrs, arguments);
      }
    }, attrs.value());
  },
  cm: null,
  docs: [],
  config: function(attrs) {
    return (function(_this) {
      return function(elm, isInitialized, ctx, vdom) {
        var CodeMirrorConfig, enableCodeMirror, key, val, _ref, _results;
        if (!isInitialized) {
          _this.initCM(attrs, elm);
        }
        if (_this.detectChange(attrs.config())) {
          _ref = attrs.config(), CodeMirrorConfig = _ref.CodeMirrorConfig, enableCodeMirror = _ref.enableCodeMirror;
          if (enableCodeMirror) {
            _this.initCM(attrs, elm);
          } else {
            _this.cm.toTextArea();
            elm.focus();
          }
          _results = [];
          for (key in CodeMirrorConfig) {
            val = CodeMirrorConfig[key];
            _results.push(_this.cm.setOption(key, val));
          }
          return _results;
        }
      };
    })(this);
  },
  prev: "",
  detectChange: function(obj) {
    var cur;
    cur = JSON.stringify(obj);
    if (cur !== this.prev) {
      this.prev = cur;
      return true;
    } else {
      return false;
    }
  },
  initCM: function(attrs, elm) {
    this.cm = CodeMirror.fromTextArea(elm);
    this.docs.push(this.cm.doc);
    this.cm.setSize("100%", "100%");
    return this.cm.on("change", function(cm, cmev) {
      m.startComputation();
      attrs.value(cm.doc.getValue());
      if (typeof attrs.onchange === "function") {
        attrs.onchange();
      }
      return m.endComputation();
    });
  }
};

marked.setOptions({
  renderer: new marked.Renderer(),
  gfm: true,
  tables: true,
  breaks: false,
  pedantic: false,
  sanitize: false,
  smartLists: false,
  smartypants: false
});

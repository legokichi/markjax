// Generated by CoffeeScript 1.10.0
var Component, Editor, Preview,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Preview = React.createClass({
  render: function() {
    return JSXTransformer.exec(this.props.body || "<div></div>");
  }
});

$(function() {
  var comp, iframeBody;
  iframeBody = document.getElementById("box-preview-iframe").contentDocument.body;
  comp = React.render(React.createElement(Preview, {}), iframeBody);
  return setInterval((function() {
    var body, date;
    date = new Date;
    console.log(body = "<div>\n<span>" + (date.getHours()) + "</span>:\n<span>" + (date.getMinutes()) + "</span>:\n<span>" + (date.getSeconds()) + "</span>\n</div>");
    return React.render(React.createElement(Preview, {
      body: body
    }), iframeBody);
  }), 1000);
});


/*
$ ->
  console.log edit = new Editor($("#box-editor")[0])
  console.log elm = React.createElement(Preview, {})
  console.log iframe = $("#box-preview-iframe")[0].contentDocument.body
  console.log comp = React.render(elm, iframe)
  edit.changeMode "markdown"
  edit.on "change", (text)->
    console.log body = "<body>"+marked(text)+"</body>"
    React.render(React.createElement(Preview, {body}), iframe)

Preview = React.createClass
  render: ->
    JSXTransformer.exec(@props.body || "<body></body>")
 */

marked.setOptions({
  renderer: new marked.Renderer(),
  gfm: true,
  tables: true,
  breaks: false,
  pedantic: false,
  sanitize: false,
  smartLists: false,
  smartypants: false
});

Component = (function(superClass) {
  extend(Component, superClass);

  function Component() {
    return Component.__super__.constructor.apply(this, arguments);
  }

  _.extend(Component.prototype, React.DOM);

  Component.element = function() {
    return React.createFactory(this).apply(this, arguments);
  };

  return Component;

})(React.Component);


/*
class Preview extends Component
  render: ->
    @iframe
      ref: 'htmlWrapper'
      html: @props.html
  componentDidMount: -> @renderFrameContents()
  componentDidUpdate: -> @renderFrameContents()
  _renderFrameContents: ->
    doc = React.findDOMNode(@).contentDocument
    if doc.readyState is 'complete'
      console.log "renderFrameContents", doc.readyState
      React.render(JSXTransformer.exec("<head>#{@props.head}</head>"), doc.head) if @props.head?
      React.render(JSXTransformer.exec("<body>#{@props.body}</body>"), doc.body) if @props.body?
    else setTimeout(@renderFrameContents, 0)
  renderFrameContents: ->
    current = @props.html
    if @_lastHtml isnt current
      @_lastHtml = current
      node = @refs.htmlWrapper.getDOMNode()
      console.log node
      node.contentDocument.body.innerHTML = current
      #node.style.height = node.contentWindow.document.body.scrollHeight + 'px'
      #node.style.width  = node.contentWindow.document.body.scrollWidth  + 'px'
  componentWillUnmount: ->
    React.unmountComponentAtNode(React.findDOMNode(@).contentDocument.head)
    React.unmountComponentAtNode(React.findDOMNode(@).contentDocument.body)
 */

Editor = (function(superClass) {
  extend(Editor, superClass);

  function Editor(elm) {
    this.elm = elm;
    EventEmitter.call(this);
    this.cm = CodeMirror.fromTextArea($(this.elm).find("textarea")[0], this.option);
    this.cm.setSize("100%", "100%");
    this.docs = [];
    this.docs.push(this.cm.doc);
    this.cm.on("change", (function(_this) {
      return function() {
        return _this.emit("change", _this.cm.doc.getValue());
      };
    })(this));
  }

  Editor.prototype.changeMode = function(mode) {
    return this.cm.setOption("mode", mode);
  };

  Editor.prototype.option = {
    tabMode: "indent",
    tabSize: 2,
    theme: 'solarized dark',
    autoCloseTags: true,
    lineNumbers: true,
    matchBrackets: true,
    autoCloseBrackets: true,
    showCursorWhenSelecting: true,
    extraKeys: {
      "Tab": function(cm) {
        return CodeMirror.commands[(cm.getSelection().length ? "indentMore" : "insertSoftTab")](cm);
      },
      "Shift-Tab": "indentLess"
    }
  };

  return Editor;

})(EventEmitter);
